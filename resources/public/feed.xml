<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://lisp.rocks/' rel='self' type='application/rss+xml'/>
<title>
(print &quot;Lisp Rocks&quot;)
</title>
<link>
http://lisp.rocks/
</link>
<description>
Lisp Rocks
</description>
<lastBuildDate>
Sat, 30 Dec 2017 16:58:52 +0800
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://lisp.rocks/posts-output/2017-12-28-WindowsBatch處理appendToFile的方法/
</guid>
<link>
http://lisp.rocks/posts-output/2017-12-28-WindowsBatch處理appendToFile的方法/
</link>
<title>
Windows batch 中處理 append file 的方法
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在 Windows 中如果要透過 batch 來 append file 有三種方法&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;單行&amp;#95;append&quot;&gt;&lt;/a&gt;單行 Append&lt;/h3&gt;&lt;p&gt;如果內容單行可以解決，可以透過 &lt;code&gt;&amp;gt;&amp;gt; file.txt echo something&lt;/code&gt; 來做&lt;/p&gt;&lt;p&gt;這個指令特別的地方在於 &lt;code&gt;echo&lt;/code&gt; 可以放在 &lt;code&gt;&amp;gt;&amp;gt; file.txt&lt;/code&gt; 之後，沒有那麼直覺&lt;/p&gt;&lt;p&gt;如果遇到有空格或是特殊符號，可以先用 &lt;code&gt;set&lt;/code&gt; 的方法建立內容&lt;/p&gt;&lt;p&gt;但是因為 &lt;code&gt;set&lt;/code&gt; 完可能會有雙引號 &lt;code&gt;&amp;quot;&lt;/code&gt; ，要解除得用 &lt;code&gt;%VAR:&amp;quot;=%&lt;/code&gt; 處理&lt;/p&gt;&lt;pre&gt;&lt;code&gt;REM 1. 有空格
set insertString1=&amp;quot;hello world&amp;quot;
set insertString1=%insertString1%
&amp;gt;&amp;gt; file1.txt echo insertString1

REM 2. 有特殊字符（例如 &amp;lt; 和 &amp;gt; ）使用 &amp;#94; 前置處理
set insertString2=&amp;quot;#include &amp;#94;&amp;lt;stdio&amp;#94;&amp;gt;&amp;quot;
set insertString2=%insertString2%
&amp;gt;&amp;gt; file2.txt echo insertString2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;刪除舊有內容，全新&amp;#95;append&amp;#95;(&amp;#95;相當於&amp;#95;write&amp;#95;)&quot;&gt;&lt;/a&gt;刪除舊有內容，全新 Append ( 相當於 Write )&lt;/h3&gt;&lt;p&gt;可以透過 &lt;code&gt;type&lt;/code&gt; 指令完成，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;type src&amp;#95;file.txt &amp;gt; target&amp;#95;file.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;在原有內容上&amp;#95;append&quot;&gt;&lt;/a&gt;在原有內容上 Append&lt;/h3&gt;&lt;p&gt;然而更多的是在原有內容上 Append&lt;/p&gt;&lt;p&gt;所以可以透過 &lt;code&gt;copy /b&lt;/code&gt; 以及 &lt;code&gt;+&lt;/code&gt; 的方式處理：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;copy /b append&amp;#95;file.txt+src&amp;#95;file.txt append&amp;#95;file.txt&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 28 Dec 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://lisp.rocks/posts-output/2017-12-27-在Emacs中安靜地執行async-shell-command/
</guid>
<link>
http://lisp.rocks/posts-output/2017-12-27-在Emacs中安靜地執行async-shell-command/
</link>
<title>
Emacs 中安靜地執行 async-shell-command
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;安靜地在 Emacs 中執行 async-shell-command 有兩種方式：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;1.&amp;#95;display-buffer-alist&quot;&gt;&lt;/a&gt;1. display-buffer-alist&lt;/h3&gt;&lt;p&gt;如果你想要對所有的 &lt;code&gt;async-shell-command&lt;/code&gt; 都安靜執行，可以透過：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;add-to-list 'display-buffer-alist
  '&amp;#40;&amp;quot;\\&amp;#42;Async Shell Command\\&amp;#42;.&amp;#42;&amp;quot; display-buffer-no-window&amp;#41;&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Spacemacs 中可以把上面兩行加入在 &lt;code&gt;dotspacemacs/user-config&lt;/code&gt; 裡面&lt;/p&gt;&lt;p&gt;缺點是所有的 async shell command 都會被安靜執行，有時候有些 async shell command 我們還是希望跳出視窗提醒&lt;/p&gt;&lt;p&gt;例如執行一些執行 local server 的 command ，不然再開一個可能會開新的 port 所以我推薦第二個方法&lt;/p&gt;&lt;p&gt;&lt;br&gt; &lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;2.&amp;#95;call-process-shell-command&quot;&gt;&lt;/a&gt;2. call-process-shell-command&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;call-process-shell-command&lt;/code&gt; 要留意指令後需要添加 &lt;code&gt;nil 0&lt;/code&gt; 參數：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;call-process-shell-command
    &amp;#40;async-shell-command 
        ... ;; 做你想做的事情 
       &amp;#41; nil 0&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這種方式對個別 async-shell-command 可以分別操作，但是缺點是他會問你要不要開新的 buffer&lt;/p&gt;&lt;p&gt;如果你是有透過 after-save-hook 之類的會高頻率地呼叫 asnc-shellc-ommand，那這個方法會很煩&lt;/p&gt;&lt;p&gt;可能就要選第一個方法&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;3.&amp;#95;shell-command&amp;#95;+&amp;#95;kill-buffer&quot;&gt;&lt;/a&gt;3. shell-command + kill-buffer&lt;/h3&gt;&lt;p&gt;如果你的 shell-command 跑起來很快就結束，又會高頻率地呼叫到的話&lt;/p&gt;&lt;p&gt;可以考慮使用 shell-command 而非 async 然後搭配 kill-buffer 來解決一堆 shell command buffer 的問題&lt;/p&gt;&lt;p&gt;也就是說，把 call-process-shell-command 中換成：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;call-process-shell-command
    &amp;#40;shell-command 
        ... ;; 做你想做的事情 
       &amp;#41;
    &amp;#40;kill-buffer &amp;quot;&amp;#42;Shell Command Output&amp;#42;&amp;quot; nil 0&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣即可，就留意可能會頓一下因為是在執行 shell-command&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 27 Dec 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://lisp.rocks/posts-output/2017-12-27-Emacs中處理Windows路徑轉換/
</guid>
<link>
http://lisp.rocks/posts-output/2017-12-27-Emacs中處理Windows路徑轉換/
</link>
<title>
Emacs 中處理 Windows 路徑轉換
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在 Windows 中使用 Emacs 時，處理路徑轉換很麻煩，因為你從各種函數中拿到的路徑可能會有：&lt;/p&gt;&lt;p&gt;1 . 像是 Linux 系統中的路徑，例如 &lt;code&gt;&amp;#126;/.spacemacs.d/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;2 . 像是 Windows 系統中的路徑，例如 &lt;code&gt;c:\ \ Users \ \ myName&lt;/code&gt; ( Spacemacs 默認 c 是小寫 )&lt;/p&gt;&lt;p&gt;3 . 又或是兩者的混合版本，例如 &lt;code&gt;c:/Users/myName&lt;/code&gt; ，這種最麻煩&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;這樣在背景執行例如 &lt;code&gt;async-shell-command&lt;/code&gt; 就會很不方便&lt;/p&gt;&lt;p&gt;所以通常就得在外面再包一層把路徑換掉的函數，使用的方法可以用：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;replace-regexp-in-string &amp;quot;\/&amp;quot; &amp;quot;\\\\&amp;quot; path&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或是：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;replace-regexp-in-string &amp;quot;/&amp;quot; &amp;#40;regexp-quote &amp;quot;\\&amp;quot;&amp;#41; path&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣就沒問題了，搭配 &lt;code&gt;projectile-project-root&lt;/code&gt; 就能輕鬆在跟目錄下執行 bat scripts ！&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 27 Dec 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://lisp.rocks/posts-output/2017-12-26-回顧2017感謝篇/
</guid>
<link>
http://lisp.rocks/posts-output/2017-12-26-回顧2017感謝篇/
</link>
<title>
回顧2017 (感謝篇)
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;不知不覺又到了 2017 年尾，今年比起去年有了很大幅度的沉澱與成長&lt;/p&gt;&lt;p&gt;總結一句話的話，就是大概知道 &lt;strong&gt;「自己理想中的能力，與目前自己的大約差距」&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我就依序在各方面做一些紀錄，同時也感謝一些朋友與前輩（以 GitHub ID 稱呼）&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;今年年初過年期間的那 7-8 天，我把 &lt;a href='https://github.com/emacs-china/Spacemacs-rocks'&gt;子龍山人的 Spacemacs Rocks&lt;/a&gt; 全部看完&lt;/p&gt;&lt;p&gt;從那時候起開始使用 &lt;a href='https://github.com/syl20bnr/spacemacs'&gt;Spacemacs&lt;/a&gt; ，我已經記不得 2016 我怎麼還願意使用 Emacs&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;今年要總結成長最多的，就是在使用 Emacs 這件事上面！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;對我工作各方面都有 10x 效率 的提升&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;不過有兩個人對我使用 Emacs 有非常重要的影響，分別是：&lt;/p&gt;&lt;p&gt;1 . &lt;a href='https://github.com/emacs-tw/emacs-101-beginner-survival-guide'&gt;Emacs 101 新手求生指南&lt;/a&gt; 作者的 &lt;a href='https://github.com/kuanyui'&gt;kuanyui&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2 . &lt;a href='http://coldnew.github.io/COSCUP2013_org-mode/slide.html'&gt;Org-mode : Emacs 下的瑞士軍刀&lt;/a&gt; 作者的 &lt;a href='https://github.com/coldnew'&gt;coldnew&lt;/a&gt;&lt;/p&gt;&lt;p&gt;這兩位大大都出沒在 &lt;a href='https://telegram.me/joinchat/CJbTID9kpknioj9rYv6zgg'&gt;Telegram 的 EmacsTW 頻道&lt;/a&gt; ，很熱心的解答了我許多問題&lt;/p&gt;&lt;p&gt;在 2016 我看 Emacs 101 新手指南時，經常在頻道中問很白癡的問題&lt;/p&gt;&lt;p&gt;但是那時候 kuanyui 大大都很熱心的解答，那時候我使用 &lt;a href='https://github.com/overtone/emacs-live'&gt;Emacs-live&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;印象最深刻是我在 Emacs 101 新手指南第二、三章的時候&lt;/p&gt;&lt;p&gt;第一次使用 C-x i 指令，插入另一份文件到目前文件之中，我覺得這功能實在太酷了！&lt;/p&gt;&lt;p&gt;在此之前，我除了 Matlab 以及大學用過的 DevC++ 之外，沒有任何編輯器使用經驗&lt;/p&gt;&lt;p&gt;這大概是我 2016 能活下來的原因吧，儘管是回顧 2017 ，但還是想在提一下 2016 的往事&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;除此之外，就是 &lt;a href='https://clojure.tw'&gt;ClojureTW&lt;/a&gt; 的 &lt;a href='https://github.com/cataska'&gt;cataska&lt;/a&gt; 大大從 2015 到現在(2017)一直堅持辦活動！&lt;/p&gt;&lt;p&gt;讓我保持著對 LISP 持續學習沒有中斷。&lt;/p&gt;&lt;p&gt;更重要的是，今年 Emacs 在 COSCUP2017 上面有單獨的議程軌！&lt;/p&gt;&lt;p&gt;更更更重要的是，我居然有機會可以上去分享！&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;可能對於其他都是 IT 業界、軟硬體工程師的許多朋友來說，這好像不是什麼大事情&lt;/p&gt;&lt;p&gt;但對於我來說，是一個很大的自信心的鼓舞和肯定，我很高興前輩們願意給予機會QQ！&lt;/p&gt;&lt;p&gt;我從以前都不是特別會寫程式的人，每次在 Telegram 看到大家著一堆名詞，我都不了解&lt;/p&gt;&lt;p&gt;其實內心還是有點小沮喪啦&amp;#x2026; 但更多就是多聽多學&amp;#x2026;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;像是 caasi 大大每次都會在 &lt;a href='http://cschat.tw'&gt;cschat.tw&lt;/a&gt; 上面分享很多很不錯的資訊，都來不及讀&lt;/p&gt;&lt;p&gt;我當然知道我的本業和大家差距很大，但大家討論的東西我真的非常有興趣&lt;/p&gt;&lt;p&gt;這中間 coldnew 和 irc 上面的 letoh 大大不嫌棄給我許多很基礎的回覆，和指引都很感謝&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;比起去年， &lt;strong&gt;今年下半年在 Telegram 上面耍白癡的頻率開始降低&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;很重要的原因，就是我慢慢對「設計模式」、「重構」、「寫測試」有了更清楚的概念&lt;/p&gt;&lt;p&gt;可以大概知道怎麼樣去 Google 搜尋，找到答案&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;除此之外，在日常中無形對我有正面影響的更多朋友，我也都十分感謝&lt;/p&gt;&lt;p&gt;例如 Carl, Rudi, Jeffery, Albert, whitglint, Mioaski, Superbil, pertercmd, b4283 &amp;#x2026;&lt;/p&gt;&lt;p&gt;以及 Twitter 上面許多陌生推友，例如 M157q 以及他的 RSS 機器人&lt;/p&gt;&lt;p&gt;但是還是有許多要學習的地方，會繼續努力，前進 2018 ！&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 26 Dec 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://lisp.rocks/posts-output/0099-01-03-Blog-範例-jsPDF/
</guid>
<link>
http://lisp.rocks/posts-output/0099-01-03-Blog-範例-jsPDF/
</link>
<title>
Blog-範例-jsPDF
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;嘗試使用 jsPDF 來在文章中可以自己產生客製化文件的功能&lt;/p&gt;&lt;p&gt;尤其是中文的部分，使用到 jspdf.customfont 這個套件搭配 jspdf 使用&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var doc = new jsPDF&amp;#40;&amp;#41;;

// 設定字體為 王翰宗細圓體繁
doc.addFont&amp;#40;'wt006.ttf', 'HanWangYenLight', 'normal'&amp;#41;;
doc.setFont&amp;#40;'HanWangYenLight'&amp;#41;;

// 測試中文內容
doc.text&amp;#40;'&amp;#91;  &amp;#93; 1. 項目一', 10, 10&amp;#41;;
doc.text&amp;#40;'&amp;#91;  &amp;#93; 2. 項目二', 10, 20&amp;#41;;
doc.text&amp;#40;'&amp;#91;  &amp;#93; 3. 項目三', 10, 30&amp;#41;;
doc.text&amp;#40;'&amp;#91;  &amp;#93; 4. 項目四', 10, 40&amp;#41;;
doc.text&amp;#40;'&amp;#91;  &amp;#93; 5. 項目五', 10, 50&amp;#41;;

doc.save&amp;#40;'jspdf-from-lisp-rocks.pdf'&amp;#41;;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.debug.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../../fonts/jspdf.customfonts.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../../fonts/default_vfs.js&quot;&gt;&lt;/script&gt; &lt;div class=&quot;report&quot;&gt;&lt;/div&gt; &lt;button id=&quot;toPdfBtn&quot;&gt;Download PDF&lt;/button&gt; &lt;script src=&quot;../../data/jspdf-example.js&quot;&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 03 Jan 0099 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://lisp.rocks/posts-output/0099-01-02-Blog-範例-Flowchartjs/
</guid>
<link>
http://lisp.rocks/posts-output/0099-01-02-Blog-範例-Flowchartjs/
</link>
<title>
Blog 範例 flowchart.js
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文章只是單純測試本部落格如何使用 flowchart.js &lt;/p&gt;&lt;p&gt;方便未來在文章中插入使用&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;http://flowchart.js.org/raphael-min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.8.0/flowchart.min.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;diagram&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt; &lt;div id=&quot;diagram2&quot;&gt;&lt;/div&gt; &lt;script src=&quot;../../data/flowchart-example.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../../data/flowchart-my-example.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 02 Jan 0099 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://lisp.rocks/posts-output/0099-01-01-Blog-範例-Chartjs/
</guid>
<link>
http://lisp.rocks/posts-output/0099-01-01-Blog-範例-Chartjs/
</link>
<title>
Blog 範例 - ChartJS
</title>
<description>
&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;這篇僅單純在本部落格測試使用 ChartJS 的範例&lt;/p&gt;&lt;p&gt;方便未來文章中要插入資料圖表時做參考使用&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;http://www.chartjs.org/dist/2.7.1/Chart.bundle.js&quot;&gt;&lt;/script&gt; &lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;script src=&quot;../../data/plot_example.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 01 Jan 0099 00:00:00 +0800
</pubDate>
</item>
</channel>
</rss>
