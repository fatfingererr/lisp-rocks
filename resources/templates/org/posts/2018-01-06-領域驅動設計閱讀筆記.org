#+OPTIONS: toc:nil
#+BEGIN_SRC json :noexport:
{:title "〈領域驅動設計〉閱讀筆記" :layout :post :tags ["reading" "note"] :toc false}
#+END_SRC
*


**

- Core Domain :
- Supporting Subdomain


*** 貧血領域對象 Anemic DOmain Object

- 大量 getter/setter 而沒有業務邏輯

- 業務對象只有一堆屬性值　

雖然 setter/getter 是方法，看似是物件行為，但並沒有業務價值

如果我們只是對物件去做 setter/getter 只是在創建純資料類型

當發生以上兩件事時，代表你的程式碼存在物件－關係阻抗失衡（ Object-Relational Impedance ）

Object-Relational Impedance 說至少存在三個問題：

- 業務意圖不明確

- 方法實現存在潛在的複雜性

- Object 不是 Object ，只是一個數據持有器（data holder）

*** 掌握通用語言

> 通用語言表示的是在團隊範圍內，對一個領域模型所使用的描述語言

- 同時繪製物理模型和概念模型圖，並標示出名字和行為

- 建立一個包含簡單定義的術語表，想到的術語都列出來，好的不好的都列出來。

  藉此創造可重用的命名方式和詞彙

- 也可以透過文件來做，並且把模型圖也一併放到文件中。

- 可能存在分歧，所以可以再找外部人員來檢查詞彙表。

*** 戰略設計

- 一開始設計的時候，可能會將焦點放在 (1) 實體和 (2) 值對象

- 會造成多個概念混合關聯，實作後可能變成大泥球 Big Ball of Mud

- 所有人可能會發現概念耦合


*** 問題空間與解空間 problem space and solution space

- 問題空間中我們思考的是業務面臨的挑戰

- 解空間思考的是如何透過軟體解決挑戰

- 問題空間是領域的一部分，對問題空間的研究會開啟一個新的核心域

- 解空間包含一組特定的軟體模型

> 面對廣泛的問題空間和解空間，首先要問底下的問題

**** 戰略核心域的名字是什麼？目標是什麼？

**** 戰略核心域包含那些概念

**** 戰略核心域的支撐子域的通用子域是什麼

**** 如何安排項目人員

**** 能組出合適的團隊

*** 解決方案的評估

解決方案通常很長時間依賴現有的技術與系統

你可以問底下的問題

- 有哪些軟體資產已經存在，是否可以重用？

- 哪些資產需要建立，或是可以從別處獲得？

- 這些資產如何集合再一起的？

- 還需要什麼樣的集成
